{"version":3,"sources":["HouseDetail.tsx","House.tsx","HouseOverview.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HouseDetail","props","state","axios","get","this","match","params","houseId","then","res","setState","data","parseInt","undefined","fetchContent","index","dataType","Typography","matcher","shortLink","backgroundColor","key","to","startsWith","target","rel","href","Array","isArray","map","entry","newIndex","getRepresentation","Card","className","style","variant","name","Table","TableBody","Object","keys","TableRow","hover","TableCell","align","size","toUpperCase","CircularProgress","React","Component","withRouter","colors","delayClasses","House","countNumber","id","length","firstTimeShown","setTimeout","event","history","push","animationClass","rndNumber","Math","round","random","onClick","handleClick","bind","CardContent","color","HouseOverview","entries","page","currentPage","pageCount","loading","fetchElements","firstTime","pageSize","links","headers","link","split","item","i","trim","forEach","element","includes","found","Number","url","Boolean","Box","Pagination","count","siblingCount","boundaryCount","onChange","paginationChange","App","path","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gbAmCMA,G,wDAIJ,WAAYC,GAA0B,IAAD,8BACnC,cAAMA,IAHRC,WAEqC,EAEnC,EAAKA,MAAQ,GAFsB,E,2DAKrB,IAAD,OACbC,IAAMC,IAAI,4CAA8CC,KAAKJ,MAAMK,MAAMC,OAAOC,SAC7EC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAAEC,KAAMF,EAAIE,KAAMJ,QAASK,SAAS,EAAKZ,MAAMK,MAAMC,OAAOC,gB,2CAM1EK,SAASR,KAAKJ,MAAMK,MAAMC,OAAOC,WAAuBH,KAAKH,MAAMM,cAA+BM,IAApBT,KAAKH,MAAMU,OAC3FP,KAAKM,SAAS,CAAEC,UAAME,IACtBT,KAAKU,kB,0CAKPV,KAAKU,iB,wCAGWH,EAChBI,GAAqB,IAAD,OAChBC,SAA0BL,EAC9B,GAAY,MAARA,EACF,OAAQ,kBAACM,EAAA,EAAD,MAEV,GAAiB,WAAbD,EAAuB,CACzB,GAAKL,EAAgBN,MAAM,qCAAsC,CAC/D,IAAIa,EAAWP,EAAgBN,MAAM,iBACrC,GAAe,MAAXa,EAAiB,CACnB,IAAIC,EAAY,iBAAmBD,EAAQ,GAAK,IAAMd,KAAKJ,MAAMK,MAAMC,OAAOc,gBAC9E,OAAO,kBAAC,IAAD,CAAMC,IAAKN,EAAOO,GAAIH,GAAtB,SAAwCD,EAAQ,IAEvD,OAAQ,kBAACD,EAAA,EAAD,CAAYI,IAAKN,GAAQJ,GAG9B,OAAKA,EAAgBY,WAAW,YAC9B,yBAAKF,IAAKN,GAAO,uBAAGS,OAAO,SAASC,IAAI,sBAAsBC,KAAMf,GAAiBA,IAEpF,kBAACM,EAAA,EAAD,CAAYI,IAAK,QAAUN,GAAQJ,GAExC,MAAiB,WAAbK,GACLW,MAAMC,QAAQjB,GACPA,EAAkBkB,KAAI,SAACC,EAAOC,GAAe,OAAO,EAAKC,kBAAkBF,EAAOf,EAAoB,IAAXgB,MAGjG,kBAACd,EAAA,EAAD,KAAaN,K,+BAIZ,IAAD,OACHA,EAAOP,KAAKH,MAAMU,KACtB,OAAKA,EAYH,kBAACsB,EAAA,EAAD,CACEC,UAAW,wBACXC,MAAO,CAAEf,gBAAiB,IAAMhB,KAAKJ,MAAMK,MAAMC,OAAOc,kBACxD,yBAAKc,UAAU,YACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAMA,UAAU,cAAcZ,GAAG,KAAjC,uBAEF,kBAACL,EAAA,EAAD,CAAYmB,QAAQ,KAAKF,UAAU,0BAA0BvB,EAAK0B,MAClE,kBAACC,EAAA,EAAD,CAAOJ,UAAU,iBACf,kBAACK,EAAA,EAAD,KACIC,OAAOC,KAAK9B,GAAMkB,KAAI,SAACR,EAAKN,GAAN,OAAiB,kBAAC2B,EAAA,EAAD,CAAUC,OAAO,EAAMtB,IAAK,OAASN,GAAO,kBAAC6B,EAAA,EAAD,CAAWvB,IAAKN,EAAQ,KAAM8B,MAAM,QAAQC,KAAK,SAASZ,UAAU,aAAab,EAAI0B,eAA0B,kBAACH,EAAA,EAAD,CAAWvB,IAAKN,EAAQ,KAAM8B,MAAM,OAAOX,UAAU,gBAAgB,EAAKF,kBAAkBrB,EAAMU,GAA6BN,YApBzU,kBAACkB,EAAA,EAAD,CACEC,UAAW,wBACXC,MAAO,CAAEf,gBAAiB,IAAMhB,KAAKJ,MAAMK,MAAMC,OAAOc,kBACxD,yBAAKc,UAAU,YACb,kBAACc,EAAA,EAAD,Y,GAlEcC,IAAMC,YA2FjBC,cAAWpD,G,iBC/GpBqD,EAAS,CAAC,SAAU,SAAU,SAAU,SAAU,UAClDC,EAAe,CAAC,QAAS,SAAU,QAGnCC,E,kDAIF,WAAYtD,GAAoB,IAAD,8BAC3B,cAAMA,IAHVoB,qBAE+B,IAgB/BmC,YAAc,EAAKvD,MAAMwD,GAdrB,EAAKpC,gBAAkBgC,EAAO,EAAKG,YAAcH,EAAOK,QACxD,EAAKxD,MAAQ,CACTyD,gBAAgB,GAJO,E,gEAQV,IAAD,OAChBC,YAAW,WAAO,EAAKjD,SAAS,CAAEgD,gBAAgB,MAAU,O,kCAGpDE,GACRxD,KAAKJ,MAAM6D,QAAQC,KAAK,iBAAmB1D,KAAKJ,MAAMwD,GAAK,IAAMpD,KAAKgB,mB,+BAOtE,IAAI2C,EAAiB,GACrB,GAAK3D,KAAKH,MAAMyD,eAMZK,EAAiB,mBANW,CAC5B,IAAIC,EAAYC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAGhDJ,EAAiB,qDAFAV,EAAaW,GAMlC,OACI,kBAAC/B,EAAA,EAAD,CAAMC,UAAW,aAAe6B,EAC5BK,QAAShE,KAAKiE,YAAYC,KAAKlE,MAC/B+B,MAAO,CAAEf,gBAAiB,IAAMhB,KAAKgB,kBACrC,kBAACmD,EAAA,EAAD,KACI,kBAACtD,EAAA,EAAD,CAAYmB,QAAQ,KAAKS,MAAM,SAAS2B,MAAM,gBAAgBtC,UAAU,eACnE9B,KAAKJ,MAAMwD,IAEhB,kBAACvC,EAAA,EAAD,CAAYmB,QAAQ,KAAKS,MAAM,SAAS2B,MAAM,cAActC,UAAU,eACjE9B,KAAKJ,MAAMqC,MAEhB,kBAACpB,EAAA,EAAD,CAAY4B,MAAM,SAASX,UAAU,cAArC,gC,GA5CAgB,aAsDLC,cAAWG,G,kBCnDLmB,E,kDAEnB,WAAYzE,GAAgB,IAAD,8BACzB,cAAMA,IACDC,MAAQ,CACXyE,QAAS,GACTC,KAAM,EACNC,YAAa,EACbC,UAAW,EACXC,SAAS,GAPc,E,iEAYrB1E,KAAKH,MAAM2E,cAAgBxE,KAAKH,MAAM0E,OACxCvE,KAAKM,SAAS,CAAEkE,YAAaxE,KAAKH,MAAM0E,OACxCvE,KAAK2E,mB,qCAKP3E,KAAKM,SAAS,CAAEiE,KAAOvE,KAAKH,MAAM0E,KAAO,M,yCAIzCvE,KAAKM,SAAS,CAAEiE,KAAOvE,KAAKH,MAAM0E,KAAO,M,uCAG1Bf,EAAYe,GAC3BvE,KAAKM,SAAS,CAAEiE,KAAMA,M,sCAGmB,IAAD,OAA5BK,EAA4B,wDACxC5E,KAAKM,SAAS,CAAEoE,SAAS,IACzB5E,IAAMC,IAAI,2CAA4C,CAAEG,OAAQ,CAAE2E,SAAU,GAAIN,KAAMvE,KAAKH,MAAM0E,QAC9FnE,MAAK,SAAAC,GACJ,IAAIyE,EAAQzE,EAAI0E,QAAQC,KAAKC,MAAM,KAAKxD,KAAI,SAACyD,GAAmB,OAAOA,EAAKD,MAAM,KAAKxD,KAAI,SAAC0D,GAAD,OAAeA,EAAEC,aACxGR,GACFE,EAAMO,SAAQ,SAACC,GACb,GAAIA,EAAQC,SAAS,cAAe,CAClC,IAAIC,EAAQF,EAAQ,GAAGrF,MAAM,eACvBuF,GACJ,EAAKlF,SAAS,CACZmE,UAAWgB,OAAOD,EAAM,UAQlC,EAAKlF,SAAS,CACZgE,QAASjE,EAAIE,KAAKkB,KAAI,SAACyD,GAAkB,MAAO,CAAEjD,KAAMiD,EAAKjD,KAAMyD,IAAKR,EAAKQ,IAAIzF,MAAM,YACvFyE,SAAS,S,0CAQf1E,KAAK2E,eAAc,K,+BAKnB,OAAIgB,QAAQ3F,KAAKH,MAAMyE,SAInB,kBAACsB,EAAA,EAAD,CAAK9D,UAAW,wBACd,yBAAKA,UAAW,mBACd,kBAAC+D,EAAA,EAAD,CACEC,MAAO9F,KAAKH,MAAM4E,UAClBsB,aAAc,EACdC,cAAe,EACfC,SAAUjG,KAAKkG,iBAAiBhC,KAAKlE,MACrC0C,KAAK,SACLV,QAAQ,WACRF,UAAU,yBAGZ9B,KAAKH,MAAM6E,QAEV,6BAAK,kBAAC9B,EAAA,EAAD,OADL5C,KAAKH,MAAMyE,QAAQ7C,KAAI,SAACyD,GAAW,OAAQ,kBAAC,EAAD,CAAOjE,IAAKT,SAAS0E,EAAKQ,KAAMtC,GAAI5C,SAAS0E,EAAKQ,KAAMzD,KAAMiD,EAAKjD,WAQnH,gD,GA3FmCY,IAAMC,WCClCqD,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,2CACV,kBAAC,EAAD,CAAajG,QAAQ,YAAYa,gBAAgB,uBAEnD,kBAAC,IAAD,CAAOoF,KAAK,KACV,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAMlF,GAAG,qBAAT,oBCHUyE,QACW,cAA7BU,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStG,MACvB,2DCZNuG,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDmIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1G,MAAK,SAAA2G,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7f94d5a3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link, withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { Card, Table, TableBody, TableCell, TableRow, Typography, CircularProgress } from '@material-ui/core';\r\nimport './HouseDetail.css';\r\n\r\ninterface HouseDetailProps extends RouteComponentProps<any> {\r\n  houseId: string;\r\n  backgroundColor: string;\r\n}\r\n\r\ninterface HouseJsonType {\r\n  url: URL;\r\n  name: string;\r\n  region: string;\r\n  coatOfArms: string;\r\n  words: string;\r\n  titles?: (string)[] | null;\r\n  seats?: (string)[] | null;\r\n  currentLord: string;\r\n  heir: string;\r\n  overlord: string;\r\n  founded: string;\r\n  founder: string;\r\n  diedOut: string;\r\n  ancestralWeapons?: (string)[] | null;\r\n  cadetBranches?: (null)[] | null;\r\n  swornMembers?: (string)[] | null;\r\n}\r\n\r\ninterface IState {\r\n  data?: HouseJsonType;\r\n  houseId?: number;\r\n}\r\n\r\nclass HouseDetail extends React.Component<HouseDetailProps, IState>{\r\n\r\n  state: IState;\r\n\r\n  constructor(props: HouseDetailProps) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  fetchContent() {\r\n    axios.get(\"https://anapioficeandfire.com/api/houses/\" + this.props.match.params.houseId)\r\n      .then(res => {\r\n        this.setState({ data: res.data, houseId: parseInt(this.props.match.params.houseId as string) });\r\n      })\r\n\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (parseInt(this.props.match.params.houseId as string) !== this.state.houseId && this.state.data !== undefined) {\r\n      this.setState({ data: undefined })\r\n      this.fetchContent();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchContent()\r\n  }\r\n\r\n  getRepresentation(data: string | URL | string[] | null[] | null | undefined,\r\n    index: number): any {\r\n    let dataType: string = typeof data;\r\n    if (data == null) {\r\n      return (<Typography></Typography>);\r\n    }\r\n    if (dataType === \"string\") {\r\n      if ((data as string).match(\"anapioficeandfire.com/api/houses/\")) {\r\n        let matcher = (data as string).match(\"houses/(\\\\d+)\");\r\n        if (matcher != null) {\r\n          let shortLink = \"/houseDetails/\" + matcher[1] + \"/\" + this.props.match.params.backgroundColor\r\n          return <Link key={index} to={shortLink}>House {matcher[1]}</Link>\r\n        } else {\r\n          return (<Typography key={index}>{data}</Typography>);\r\n        }\r\n\r\n      } else if ((data as string).startsWith(\"https://\")) {\r\n        return <div key={index}><a target=\"_blank\" rel=\"noopener noreferrer\" href={data as string}>{data}</a></div>;\r\n      } else {\r\n        return (<Typography key={\"data_\" + index}>{data}</Typography>)\r\n      }\r\n    } else if (dataType === \"object\") {\r\n      if (Array.isArray(data)) {\r\n        return ((data as string[]).map((entry, newIndex) => { return this.getRepresentation(entry, index + (newIndex * 100)) }));\r\n      }\r\n    }\r\n    return <Typography>{data}</Typography>\r\n  }\r\n\r\n\r\n  render() {\r\n    let data = this.state.data;\r\n    if (!data) {\r\n      return (\r\n        <Card\r\n          className={\"house_detail centered\"}\r\n          style={{ backgroundColor: \"#\" + this.props.match.params.backgroundColor }}>\r\n          <div className=\"centered\">\r\n            <CircularProgress />\r\n          </div>\r\n        </Card>\r\n      )\r\n    }\r\n    return (\r\n      <Card\r\n        className={\"house_detail centered\"}\r\n        style={{ backgroundColor: \"#\" + this.props.match.params.backgroundColor }}>\r\n        <div className=\"centered\">\r\n          <div className=\"left\">\r\n            <Link className=\"link_button\" to=\"/\">&lt; Back to Overview</Link>\r\n          </div>\r\n          <Typography variant=\"h3\" className=\"big_header text_shadow\">{data.name}</Typography>\r\n          <Table className=\"details_table\">\r\n            <TableBody>\r\n              {(Object.keys(data).map((key, index) => (<TableRow hover={true} key={\"row_\" + index}><TableCell key={index + \"_1\"} align=\"right\" size=\"medium\" className=\"name_cell\">{key.toUpperCase()}</TableCell><TableCell key={index + \"_2\"} align=\"left\" className=\"content_cell\">{this.getRepresentation(data![key as keyof HouseJsonType], index)}</TableCell></TableRow>)))}\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n      </Card >\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(HouseDetail);","import React, { Component, MouseEvent } from 'react';\r\nimport \"./House.css\";\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\n\r\ninterface HouseProps extends RouteComponentProps<any> {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\ninterface HouseState {\r\n    firstTimeShown: boolean\r\n}\r\n\r\nconst colors = ['265077', '04407c', '494B68', '1E4258', '2D5F5D']\r\nconst delayClasses = [\"short\", \"medium\", \"long\"]\r\n\r\n\r\nclass House extends Component<HouseProps, HouseState> {\r\n\r\n    backgroundColor: string;\r\n\r\n    constructor(props: HouseProps) {\r\n        super(props)\r\n        this.backgroundColor = colors[this.countNumber % colors.length];\r\n        this.state = {\r\n            firstTimeShown: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {this.setState({ firstTimeShown: true })}, 1000)\r\n    }\r\n\r\n    handleClick(event: MouseEvent) {\r\n        this.props.history.push(\"/houseDetails/\" + this.props.id + \"/\" + this.backgroundColor );\r\n    };\r\n\r\n    countNumber = this.props.id;\r\n        \r\n    render() {\r\n\r\n        let animationClass = \"\";\r\n        if (!this.state.firstTimeShown) {\r\n            let rndNumber = Math.round(Math.random() * 3) % 3\r\n            let delayClass = delayClasses[rndNumber]\r\n\r\n            animationClass = \"animate__fadeInUp animate__animated animate_delay_\" + delayClass\r\n        } else {\r\n            animationClass = \"hover_effect\"\r\n        }\r\n        return (\r\n            <Card className={\"houseCard \" + animationClass}\r\n                onClick={this.handleClick.bind(this)}\r\n                style={{ backgroundColor: '#' + this.backgroundColor }} >\r\n                <CardContent>\r\n                    <Typography variant=\"h3\" align=\"center\" color=\"textSecondary\" className=\"text_shadow\">\r\n                        {this.props.id}\r\n                    </Typography>\r\n                    <Typography variant=\"h5\" align=\"center\" color=\"textPrimary\" className=\"text_shadow\">\r\n                        {this.props.name}\r\n                    </Typography>\r\n                    <Typography align=\"center\" className=\"click_info\">\r\n                        Click for more details\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(House);","import React from 'react';\r\nimport './App.css';\r\nimport House from './House';\r\nimport { Box, CircularProgress } from '@material-ui/core';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport axios from \"axios\";\r\n\r\ninterface IProps { }\r\n\r\ninterface entry {\r\n  name: string,\r\n  url: string\r\n}\r\n\r\ninterface IState {\r\n  entries: entry[],\r\n  page: number,\r\n  currentPage: number,\r\n  pageCount: number,\r\n  loading: boolean\r\n};\r\n\r\nexport default class HouseOverview extends React.Component<IProps, IState> {\r\n\r\n  constructor(props: IProps) {\r\n    super(props)\r\n    this.state = {\r\n      entries: [],\r\n      page: 1,\r\n      currentPage: 1,\r\n      pageCount: 1,\r\n      loading: false\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.currentPage !== this.state.page) {\r\n      this.setState({ currentPage: this.state.page })\r\n      this.fetchElements();\r\n    }\r\n  }\r\n\r\n  showNextPage() {\r\n    this.setState({ page: (this.state.page + 1) })\r\n  }\r\n\r\n  showPreviousPage() {\r\n    this.setState({ page: (this.state.page - 1) })\r\n  }\r\n\r\n  paginationChange(event: any, page: number) {\r\n    this.setState({ page: page })\r\n  }\r\n\r\n  fetchElements(firstTime: boolean = false) {\r\n    this.setState({ loading: true });\r\n    axios.get(\"https://anapioficeandfire.com/api/houses\", { params: { pageSize: 25, page: this.state.page } })\r\n      .then(res => {\r\n        let links = res.headers.link.split(',').map((item: string) => { return item.split(';').map((i: string) => i.trim()) });\r\n        if (firstTime) {\r\n          links.forEach((element: string[]) => {\r\n            if (element.includes('rel=\"last\"')) {\r\n              let found = element[0].match('page=(\\\\d+)')\r\n              if (!!found) {\r\n                this.setState({\r\n                  pageCount: Number(found[1]),\r\n                });\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n\r\n        this.setState({\r\n          entries: res.data.map((item: entry) => { return { name: item.name, url: item.url.match('\\\\d+') } }),\r\n          loading: false\r\n        });\r\n      })\r\n\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.fetchElements(true);\r\n  }\r\n\r\n\r\n  render() {\r\n    if (Boolean(this.state.entries)) {\r\n\r\n      return (\r\n\r\n        <Box className={'centered padding_top'}>\r\n          <div className={'centered sticky'}>\r\n            <Pagination\r\n              count={this.state.pageCount}\r\n              siblingCount={2}\r\n              boundaryCount={1}\r\n              onChange={this.paginationChange.bind(this)}\r\n              size=\"medium\"\r\n              variant=\"outlined\"\r\n              className=\"pagination_centered\"\r\n            ></Pagination>\r\n          </div>\r\n          {!this.state.loading ?\r\n            (this.state.entries.map((item) => { return (<House key={parseInt(item.url)} id={parseInt(item.url)} name={item.name} ></House>) })) :\r\n            (<div><CircularProgress /></div>)\r\n          }\r\n        </Box >\r\n\r\n      )\r\n    } else {\r\n      return (\r\n        <div>sorry empty</div>\r\n      )\r\n    }\r\n  }\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport HouseDetail from './HouseDetail';\nimport HouseOverview from './HouseOverview';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/houseDetails/:houseId/:backgroundColor\">\n          <HouseDetail houseId=\"{houseId}\" backgroundColor=\"{backgroundColor}\"/>\n        </Route>\n        <Route path=\"/\">\n          <HouseOverview></HouseOverview>\n          <Link to=\"/houseDetails/200\">HouseDetails</Link>\n        </Route>\n      </Switch>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}